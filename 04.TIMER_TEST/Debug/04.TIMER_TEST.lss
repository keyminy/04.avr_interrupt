
04.TIMER_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a57  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000117  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	60 c0       	rjmp	.+192    	; 0x102 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6f d0       	rcall	.+222    	; 0x188 <main>
  aa:	74 c0       	rjmp	.+232    	; 0x194 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <led_all_on_off>:

void led_all_on_off(){
	 static int led_toggle = 0;
	 //함수가 종료되더라도 update된 값을 유지하게 static
	 
	if(ms_count >= 300){
  ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ms_count>
  b2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ms_count+0x1>
  b6:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ms_count+0x2>
  ba:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ms_count+0x3>
  be:	8c 32       	cpi	r24, 0x2C	; 44
  c0:	91 40       	sbci	r25, 0x01	; 1
  c2:	a1 05       	cpc	r26, r1
  c4:	b1 05       	cpc	r27, r1
  c6:	e0 f0       	brcs	.+56     	; 0x100 <led_all_on_off+0x52>
		//hardware적으로 뜨기때문에 값이 툭 튈수도 있어요 그래서 >=로 하기(==대신)
		ms_count = 0; // clear
  c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ms_count>
  cc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ms_count+0x1>
  d0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ms_count+0x2>
  d4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ms_count+0x3>
		led_toggle = !led_toggle; // 1혹은 0의 값
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	23 2b       	or	r18, r19
  e6:	11 f0       	breq	.+4      	; 0xec <led_all_on_off+0x3e>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(led_toggle)
  f4:	89 2b       	or	r24, r25
  f6:	19 f0       	breq	.+6      	; 0xfe <led_all_on_off+0x50>
		PORTA = 0xff;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	08 95       	ret
		else
		PORTA = 0x00;
  fe:	1b ba       	out	0x1b, r1	; 27
 100:	08 95       	ret

00000102 <__vector_16>:
//타이머 관련, 전역변수로 선언
volatile uint32_t shift_timer = 0;

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	82 bf       	out	0x32, r24	; 50
	ms_count++;
 118:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ms_count>
 11c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ms_count+0x1>
 120:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <ms_count+0x2>
 124:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <ms_count+0x3>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	a1 1d       	adc	r26, r1
 12c:	b1 1d       	adc	r27, r1
 12e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ms_count>
 132:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ms_count+0x1>
 136:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <ms_count+0x2>
 13a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <ms_count+0x3>
	//ms_count delay없애는 작업필요함
	shift_timer++;
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shift_timer>
 142:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <shift_timer+0x1>
 146:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <shift_timer+0x2>
 14a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <shift_timer+0x3>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_timer>
 158:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <shift_timer+0x1>
 15c:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <shift_timer+0x2>
 160:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <shift_timer+0x3>
}
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <init_timer0>:
	// 3. 8bit timer overflow : 0.004ms * 256개 카운트 = 0.001024sec = 1.024ms
	// 1ms가 정확히 안되자너... 1ms가 정확히 될려면 어떻게 해야하나?
	// 0.004ms * 250 = 0.001(=1ms)
	
	//진짜 나중에 추가한 코드임
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	82 bf       	out	0x32, r24	; 50
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	87 bf       	out	0x37, r24	; 55
	sei(); // 전역적으로 인터럽트를 허용하겠다
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <main>:
}


int main(void)
{
	init_timer0();
 188:	f6 df       	rcall	.-20     	; 0x176 <init_timer0>

	//led A레지스터
	DDRA = 0xff; //출력모드 설정
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		#if 1
		// timer를체크하자, 1ms마다 뜬다고 했어

		led_all_on_off();
 18e:	1b ba       	out	0x1b, r1	; 27
 190:	8e df       	rcall	.-228    	; 0xae <led_all_on_off>
 192:	fe cf       	rjmp	.-4      	; 0x190 <main+0x8>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
