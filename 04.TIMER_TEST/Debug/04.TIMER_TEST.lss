
04.TIMER_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000003ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b19  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046b  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c1       	rjmp	.+602    	; 0x29c <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3c d1       	rcall	.+632    	; 0x322 <main>
  aa:	65 c1       	rjmp	.+714    	; 0x376 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <shift_left2right_keep_ledon>:
	#if 1
		//delay안하고 가기
		static int i = 0; // 이전에 update된 내용을 유지하기위해, 전역함수와 동일한 효과
		//timer interrupt가 300ms가 됬는지 안됬는지 check하는 로직 필요(main.c에 있다)
		// shift_timer를 이용합시다(extern.h)
		if(shift_timer >= 300){ // 00000001 -> 00000011 -> .... -> 11111111
  ae:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <shift_timer>
  b2:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <shift_timer+0x1>
  b6:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <shift_timer+0x2>
  ba:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <shift_timer+0x3>
  be:	4c 32       	cpi	r20, 0x2C	; 44
  c0:	51 40       	sbci	r21, 0x01	; 1
  c2:	61 05       	cpc	r22, r1
  c4:	71 05       	cpc	r23, r1
  c6:	50 f1       	brcs	.+84     	; 0x11c <shift_left2right_keep_ledon+0x6e>
			// shift_timer==300해버리면, 실제 상황에서 301ms가 넘어오면 실행안됨
			//300ms가 되면 bit shift를 해주는거야!
			shift_timer = 0; //shift_timer를 0으로 초기화 해주는거 필수
  c8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <shift_timer>
  cc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <shift_timer+0x1>
  d0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <shift_timer+0x2>
  d4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <shift_timer+0x3>
			
			if(i >= 8){
  d8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <i.1755>
  dc:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <i.1755+0x1>
  e0:	28 30       	cpi	r18, 0x08	; 8
  e2:	31 05       	cpc	r19, r1
  e4:	5c f0       	brlt	.+22     	; 0xfc <shift_left2right_keep_ledon+0x4e>
				i=0; //circulation
  e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <i.1755+0x1>
  ea:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <i.1755>
				PORTA = 0x00;
  ee:	1b ba       	out	0x1b, r1	; 27
				*pjob = RIGHT2LEFT; // RIGHT2LEFT로 넘어갑니다
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	31 83       	std	Z+1, r19	; 0x01
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret
			}else{
				// shifting logic
				PORTA |= 0b00000001 << i++; // 1.shift left , 2. i++해줌
  fc:	c9 01       	movw	r24, r18
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i.1755+0x1>
 104:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i.1755>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <shift_left2right_keep_ledon+0x64>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	2a 95       	dec	r18
 114:	e2 f7       	brpl	.-8      	; 0x10e <shift_left2right_keep_ledon+0x60>
 116:	9b b3       	in	r25, 0x1b	; 27
 118:	89 2b       	or	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	08 95       	ret

0000011e <shift_right2left_kepp_ledon>:
#if 1
	//delay안하고 가기
	static int i = 0; // 이전에 update된 내용을 유지하기위해, 전역함수와 동일한 효과
	//timer interrupt가 300ms가 됬는지 안됬는지 check하는 로직 필요(main.c에 있다)
	// shift_timer를 이용합시다(extern.h)
	if(shift_timer >= 300){ // 00000001 -> 00000011 -> .... -> 11111111
 11e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <shift_timer>
 122:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <shift_timer+0x1>
 126:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <shift_timer+0x2>
 12a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <shift_timer+0x3>
 12e:	4c 32       	cpi	r20, 0x2C	; 44
 130:	51 40       	sbci	r21, 0x01	; 1
 132:	61 05       	cpc	r22, r1
 134:	71 05       	cpc	r23, r1
 136:	50 f1       	brcs	.+84     	; 0x18c <shift_right2left_kepp_ledon+0x6e>
		// shift_timer==300해버리면, 실제 상황에서 301ms가 넘어오면 실행안됨
		//300ms가 되면 bit shift를 해주는거야!
		shift_timer = 0; //shift_timer를 0으로 초기화 해주는거 필수
 138:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <shift_timer>
 13c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <shift_timer+0x1>
 140:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <shift_timer+0x2>
 144:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <shift_timer+0x3>
			
		if(i >= 8){
 148:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <i.1759>
 14c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <i.1759+0x1>
 150:	28 30       	cpi	r18, 0x08	; 8
 152:	31 05       	cpc	r19, r1
 154:	5c f0       	brlt	.+22     	; 0x16c <shift_right2left_kepp_ledon+0x4e>
			i=0; //circulation
 156:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i.1759+0x1>
 15a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <i.1759>
			PORTA = 0x00;
 15e:	1b ba       	out	0x1b, r1	; 27
			*pjob = FLOWER_ON; // LEFT2RIGHT로 넘어갑니다
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	31 83       	std	Z+1, r19	; 0x01
 168:	20 83       	st	Z, r18
 16a:	08 95       	ret
		}else{
			// shifting logic
			PORTA |= 0b10000000 >> i++; // 1.shift right , 2. i++해줌
 16c:	c9 01       	movw	r24, r18
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <i.1759+0x1>
 174:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i.1759>
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <shift_right2left_kepp_ledon+0x64>
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	2a 95       	dec	r18
 184:	e2 f7       	brpl	.-8      	; 0x17e <shift_right2left_kepp_ledon+0x60>
 186:	9b b3       	in	r25, 0x1b	; 27
 188:	89 2b       	or	r24, r25
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret

0000018e <flower_on>:

#if 1
	static uint8_t bit_value = 0b00010000; //값을 유지해야한다
	static int i =0;
	
	if(shift_timer >= 300){
 18e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <shift_timer>
 192:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <shift_timer+0x1>
 196:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <shift_timer+0x2>
 19a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <shift_timer+0x3>
 19e:	4c 32       	cpi	r20, 0x2C	; 44
 1a0:	51 40       	sbci	r21, 0x01	; 1
 1a2:	61 05       	cpc	r22, r1
 1a4:	71 05       	cpc	r23, r1
 1a6:	b0 f1       	brcs	.+108    	; 0x214 <flower_on+0x86>
		shift_timer = 0;
 1a8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <shift_timer>
 1ac:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <shift_timer+0x1>
 1b0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <shift_timer+0x2>
 1b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <shift_timer+0x3>
		if(i >= 4){
 1b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <i.1764>
 1bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <i.1764+0x1>
 1c0:	24 30       	cpi	r18, 0x04	; 4
 1c2:	31 05       	cpc	r19, r1
 1c4:	54 f0       	brlt	.+20     	; 0x1da <flower_on+0x4c>
			i = 0;
 1c6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i.1764+0x1>
 1ca:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i.1764>
			//PORTA = 0x00;
			*pjob = FLOWER_OFF;
 1ce:	23 e0       	ldi	r18, 0x03	; 3
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	31 83       	std	Z+1, r19	; 0x01
 1d6:	20 83       	st	Z, r18
 1d8:	08 95       	ret
		}else{
			PORTA |= bit_value<<i | bit_value>>i+1;
 1da:	4b b3       	in	r20, 0x1b	; 27
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	bc 01       	movw	r22, r24
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <flower_on+0x5c>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <flower_on+0x58>
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <flower_on+0x6a>
 1f4:	95 95       	asr	r25
 1f6:	87 95       	ror	r24
 1f8:	2a 95       	dec	r18
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <flower_on+0x66>
 1fc:	86 2b       	or	r24, r22
 1fe:	84 2b       	or	r24, r20
 200:	8b bb       	out	0x1b, r24	; 27
			i += 1;
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1764>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1764+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i.1764+0x1>
 210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i.1764>
 214:	08 95       	ret

00000216 <flower_off>:

	#if 1
	static uint8_t bit_value = 0b01111111; //값을 유지해야한다
	static int i =0;
	
	if(shift_timer >= 300){
 216:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <shift_timer>
 21a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <shift_timer+0x1>
 21e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <shift_timer+0x2>
 222:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <shift_timer+0x3>
 226:	4c 32       	cpi	r20, 0x2C	; 44
 228:	51 40       	sbci	r21, 0x01	; 1
 22a:	61 05       	cpc	r22, r1
 22c:	71 05       	cpc	r23, r1
 22e:	a8 f1       	brcs	.+106    	; 0x29a <flower_off+0x84>
		shift_timer = 0;
 230:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <shift_timer>
 234:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <shift_timer+0x1>
 238:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <shift_timer+0x2>
 23c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <shift_timer+0x3>
		if(i >= 4){
 240:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 244:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 248:	24 30       	cpi	r18, 0x04	; 4
 24a:	31 05       	cpc	r19, r1
 24c:	4c f0       	brlt	.+18     	; 0x260 <flower_off+0x4a>
			i = 0;
 24e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 252:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTA = 0x00;
 256:	1b ba       	out	0x1b, r1	; 27
			*pjob = LEFT2RIGHT;
 258:	fc 01       	movw	r30, r24
 25a:	11 82       	std	Z+1, r1	; 0x01
 25c:	10 82       	st	Z, r1
 25e:	08 95       	ret
			}else{
			PORTA &= bit_value>>i & bit_value<<i+1;
 260:	4b b3       	in	r20, 0x1b	; 27
 262:	8f e7       	ldi	r24, 0x7F	; 127
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	bc 01       	movw	r22, r24
 268:	02 2e       	mov	r0, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <flower_off+0x5a>
 26c:	75 95       	asr	r23
 26e:	67 95       	ror	r22
 270:	0a 94       	dec	r0
 272:	e2 f7       	brpl	.-8      	; 0x26c <flower_off+0x56>
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	02 c0       	rjmp	.+4      	; 0x27e <flower_off+0x68>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	2a 95       	dec	r18
 280:	e2 f7       	brpl	.-8      	; 0x27a <flower_off+0x64>
 282:	86 23       	and	r24, r22
 284:	84 23       	and	r24, r20
 286:	8b bb       	out	0x1b, r24	; 27
			i += 1;
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	08 95       	ret

0000029c <__vector_16>:
//타이머 관련, 전역변수로 선언
volatile uint32_t shift_timer = 0;

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	82 bf       	out	0x32, r24	; 50
	ms_count++;
 2b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ms_count>
 2b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ms_count+0x1>
 2ba:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <ms_count+0x2>
 2be:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <ms_count+0x3>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ms_count>
 2cc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ms_count+0x1>
 2d0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <ms_count+0x2>
 2d4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <ms_count+0x3>
	//ms_count delay없애는 작업필요함
	shift_timer++;
 2d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <shift_timer>
 2dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <shift_timer+0x1>
 2e0:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <shift_timer+0x2>
 2e4:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <shift_timer+0x3>
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <shift_timer>
 2f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <shift_timer+0x1>
 2f6:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <shift_timer+0x2>
 2fa:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <shift_timer+0x3>
}
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <init_timer0>:
	// 3. 8bit timer overflow : 0.004ms * 256개 카운트 = 0.001024sec = 1.024ms
	// 1ms가 정확히 안되자너... 1ms가 정확히 될려면 어떻게 해야하나?
	// 0.004ms * 250 = 0.001(=1ms)
	
	//진짜 나중에 추가한 코드임
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	82 bf       	out	0x32, r24	; 50
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
 314:	83 b7       	in	r24, 0x33	; 51
 316:	84 60       	ori	r24, 0x04	; 4
 318:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	87 bf       	out	0x37, r24	; 55
	sei(); // 전역적으로 인터럽트를 허용하겠다
 31e:	78 94       	sei
 320:	08 95       	ret

00000322 <main>:
	shift_timer++;
}


int main(void)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <main+0x6>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
	int job = 0; //동시 실행 문제
 32c:	1a 82       	std	Y+2, r1	; 0x02
 32e:	19 82       	std	Y+1, r1	; 0x01
	init_timer0();
 330:	ef df       	rcall	.-34     	; 0x310 <init_timer0>

	//led A레지스터
	DDRA = 0xff; //출력모드 설정
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // led all off
 336:	1b ba       	out	0x1b, r1	; 27
    {
		#if 1
		// timer를체크하자, 1ms마다 뜬다고 했어

		// led_all_on_off();
		switch(job){
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	9a 81       	ldd	r25, Y+2	; 0x02
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	91 05       	cpc	r25, r1
 340:	71 f0       	breq	.+28     	; 0x35e <main+0x3c>
 342:	1c f4       	brge	.+6      	; 0x34a <main+0x28>
 344:	89 2b       	or	r24, r25
 346:	39 f0       	breq	.+14     	; 0x356 <main+0x34>
 348:	f7 cf       	rjmp	.-18     	; 0x338 <main+0x16>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	91 05       	cpc	r25, r1
 34e:	59 f0       	breq	.+22     	; 0x366 <main+0x44>
 350:	03 97       	sbiw	r24, 0x03	; 3
 352:	69 f0       	breq	.+26     	; 0x36e <main+0x4c>
 354:	f1 cf       	rjmp	.-30     	; 0x338 <main+0x16>
			case LEFT2RIGHT:
				shift_left2right_keep_ledon(&job);
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	a9 de       	rcall	.-686    	; 0xae <shift_left2right_keep_ledon>
				break;
 35c:	ed cf       	rjmp	.-38     	; 0x338 <main+0x16>
			case RIGHT2LEFT:	
				shift_right2left_kepp_ledon(&job);
 35e:	ce 01       	movw	r24, r28
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	dd de       	rcall	.-582    	; 0x11e <shift_right2left_kepp_ledon>
				break;
			case FLOWER_ON:
				flower_on(&job);
 364:	e9 cf       	rjmp	.-46     	; 0x338 <main+0x16>
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
				break;
 36a:	11 df       	rcall	.-478    	; 0x18e <flower_on>
			case FLOWER_OFF:
				flower_off(&job);
 36c:	e5 cf       	rjmp	.-54     	; 0x338 <main+0x16>
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	51 df       	rcall	.-350    	; 0x216 <flower_off>
				break;
 374:	e1 cf       	rjmp	.-62     	; 0x338 <main+0x16>

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
