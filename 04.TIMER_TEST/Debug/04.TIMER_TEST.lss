
04.TIMER_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a92  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cd  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000450  00000000  00000000  0000169f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020f  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	84 c0       	rjmp	.+264    	; 0x14a <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	80 d0       	rcall	.+256    	; 0x1aa <main>
  aa:	aa c0       	rjmp	.+340    	; 0x200 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <shift_left2right_keep_ledon>:

void shift_left2right_keep_ledon();
void shift_right2left_kepp_ledon();

void shift_left2right_keep_ledon(void){
	for(int i=0; i < 8; i++){ // for문을 2400ms동안 실행하고 빠져나오게됨
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	16 c0       	rjmp	.+44     	; 0xe0 <shift_left2right_keep_ledon+0x32>
		//문제점 : 2400ms동안 아무것도 못함
		PORTA |= 0b00000001 << i; // 기존 led를 현상유지 하기위해 |=를 해준다
  b4:	4b b3       	in	r20, 0x1b	; 27
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <shift_left2right_keep_ledon+0x14>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <shift_left2right_keep_ledon+0x10>
  c6:	84 2b       	or	r24, r20
  c8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	85 ea       	ldi	r24, 0xA5	; 165
  ce:	9e e0       	ldi	r25, 0x0E	; 14
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <shift_left2right_keep_ledon+0x22>
  d8:	00 c0       	rjmp	.+0      	; 0xda <shift_left2right_keep_ledon+0x2c>
  da:	00 00       	nop

void shift_left2right_keep_ledon();
void shift_right2left_kepp_ledon();

void shift_left2right_keep_ledon(void){
	for(int i=0; i < 8; i++){ // for문을 2400ms동안 실행하고 빠져나오게됨
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	28 30       	cpi	r18, 0x08	; 8
  e2:	31 05       	cpc	r19, r1
  e4:	3c f3       	brlt	.-50     	; 0xb4 <shift_left2right_keep_ledon+0x6>
		//문제점 : 2400ms동안 아무것도 못함
		PORTA |= 0b00000001 << i; // 기존 led를 현상유지 하기위해 |=를 해준다
		// '=' 하면은 기존 것 꺼집니다
		_delay_ms(300);
	}
	PORTA = 0x00;
  e6:	1b ba       	out	0x1b, r1	; 27
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	45 ea       	ldi	r20, 0xA5	; 165
  ec:	8e e0       	ldi	r24, 0x0E	; 14
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	40 40       	sbci	r20, 0x00	; 0
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <shift_left2right_keep_ledon+0x40>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <shift_left2right_keep_ledon+0x4a>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <shift_right2left_kepp_ledon>:
	_delay_ms(300);
}
void shift_right2left_kepp_ledon(void){
	for(int i=0; i < 8; i++){
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	16 c0       	rjmp	.+44     	; 0x12e <shift_right2left_kepp_ledon+0x32>
		PORTA |= 0b10000000 >> i; // 기존 led를 현상유지 하기위해 |=를 해준다
 102:	4b b3       	in	r20, 0x1b	; 27
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <shift_right2left_kepp_ledon+0x14>
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <shift_right2left_kepp_ledon+0x10>
 114:	84 2b       	or	r24, r20
 116:	8b bb       	out	0x1b, r24	; 27
 118:	4f ef       	ldi	r20, 0xFF	; 255
 11a:	85 ea       	ldi	r24, 0xA5	; 165
 11c:	9e e0       	ldi	r25, 0x0E	; 14
 11e:	41 50       	subi	r20, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <shift_right2left_kepp_ledon+0x22>
 126:	00 c0       	rjmp	.+0      	; 0x128 <shift_right2left_kepp_ledon+0x2c>
 128:	00 00       	nop
	}
	PORTA = 0x00;
	_delay_ms(300);
}
void shift_right2left_kepp_ledon(void){
	for(int i=0; i < 8; i++){
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	28 30       	cpi	r18, 0x08	; 8
 130:	31 05       	cpc	r19, r1
 132:	3c f3       	brlt	.-50     	; 0x102 <shift_right2left_kepp_ledon+0x6>
		PORTA |= 0b10000000 >> i; // 기존 led를 현상유지 하기위해 |=를 해준다
		// '=' 하면은 기존 것 꺼집니다
		_delay_ms(300);
	}
	PORTA = 0x00;
 134:	1b ba       	out	0x1b, r1	; 27
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	45 ea       	ldi	r20, 0xA5	; 165
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	40 40       	sbci	r20, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <shift_right2left_kepp_ledon+0x40>
 144:	00 c0       	rjmp	.+0      	; 0x146 <shift_right2left_kepp_ledon+0x4a>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <__vector_16>:
volatile uint32_t ms_count = 0; // ms count


// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	82 bf       	out	0x32, r24	; 50
	ms_count++;
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	a1 1d       	adc	r26, r1
 174:	b1 1d       	adc	r27, r1
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 182:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	//ms_count delay없애는 작업
}
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <init_timer0>:
	// 3. 8bit timer overflow : 0.004ms * 256개 카운트 = 0.001024sec = 1.024ms
	// 1ms가 정확히 안되자너... 1ms가 정확히 될려면 어떻게 해야하나?
	// 0.004ms * 250 = 0.001(=1ms)
	
	//진짜 나중에 추가한 코드임
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	82 bf       	out	0x32, r24	; 50
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
 19c:	83 b7       	in	r24, 0x33	; 51
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	87 bf       	out	0x37, r24	; 55
	sei(); // 전역적으로 인터럽트를 허용하겠다
 1a6:	78 94       	sei
 1a8:	08 95       	ret

000001aa <main>:
}


int main(void)
{
	init_timer0();
 1aa:	f6 df       	rcall	.-20     	; 0x198 <init_timer0>
    int led_toggle = 0;
	//led A레지스터
	DDRA = 0xff; //출력모드 설정
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // led all off
 1b0:	1b ba       	out	0x1b, r1	; 27


int main(void)
{
	init_timer0();
    int led_toggle = 0;
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0

    while (1) 
    {
		#if 1
		// timer를체크하자, 1ms마다 뜬다고 했어
		if(ms_count >= 500){
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1c2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1c6:	84 3f       	cpi	r24, 0xF4	; 244
 1c8:	91 40       	sbci	r25, 0x01	; 1
 1ca:	a1 05       	cpc	r26, r1
 1cc:	b1 05       	cpc	r27, r1
 1ce:	a8 f0       	brcs	.+42     	; 0x1fa <main+0x50>
			//hardware적으로 뜨기때문에 값이 툭 튈수도 있어요 그래서 >=로 하기(==대신)
			ms_count = 0; // clear
 1d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1dc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			led_toggle = !led_toggle; // 1혹은 0의 값
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	20 97       	sbiw	r28, 0x00	; 0
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <main+0x3e>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
			if(led_toggle)
 1ea:	cd 2b       	or	r28, r29
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0x4c>
				PORTA = 0xff;
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	2b bb       	out	0x1b, r18	; 27
		#if 1
		// timer를체크하자, 1ms마다 뜬다고 했어
		if(ms_count >= 500){
			//hardware적으로 뜨기때문에 값이 툭 튈수도 있어요 그래서 >=로 하기(==대신)
			ms_count = 0; // clear
			led_toggle = !led_toggle; // 1혹은 0의 값
 1f2:	ec 01       	movw	r28, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <main+0x50>
			if(led_toggle)
				PORTA = 0xff;
			else 
				PORTA = 0x00;
 1f6:	1b ba       	out	0x1b, r1	; 27
		}
		shift_left2right_keep_ledon();
 1f8:	ec 01       	movw	r28, r24
		shift_right2left_kepp_ledon();
 1fa:	59 df       	rcall	.-334    	; 0xae <shift_left2right_keep_ledon>
 1fc:	7f df       	rcall	.-258    	; 0xfc <shift_right2left_kepp_ledon>
			PORTA = 0xff;
			_delay_ms(1000); // 여기서 잠을 자는 문제점
			PORTA =0x00;
			_delay_ms(1000);
		#endif
    }
 1fe:	db cf       	rjmp	.-74     	; 0x1b6 <main+0xc>

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
